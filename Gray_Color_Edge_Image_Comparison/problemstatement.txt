1. (10p) You will compute the gray-level edges and color edges for the images used in Homework#2. For gray edges you should convert all color images to gray and compute image gradients. You can use Canny edge detector to select edge points (includes smoothing, derivative com-putation, hysteresis thresholding and non-maximum suppression). Whatever parameters you choose they should be used an all images. Note that for the next step you need the gradients of the selected points. To compute the color gradients you should split the images intor,g,bfields and computerx,gx,bx,ry,gy,bycomponents of the gradients using the same process you used for the grayimages. Note that it may be appropriate to use lower threshold for the gradients of the colorplanes than those used for the gray images.
2. (10p) Build gray edge histograms for all images in the sequence. Edge histograms should be 36-bin: you can turn a gradient angle into in index by dividing the orientation angle by 10 and rounding to the nearest integer. You should decide whether you want to use the edge magnitude in the histograms or count all selected edges using the same value, say 1.
3. (20p) To build color edge histograms you should use the gradients computed for all three color planes. You can use the vector~u= (rx+gx+bx,ry+gy+by) to determine edge orientationandm=√r2x+g2x+b2x+r2y+g2y+b2yfor its magnitude. Note that you can proceed to build the color histograms using~u,mpairs computed for all image points. You may also thresholdthe remaining points to remove too small values of m.
4. (5p) Write two functions for histograms comparison: histogram intersection and chi-squared measure. Test your functions on the image sequence.
    a) Histogram intersection. Given two color histograms H1(·) andH2(·) their intersectionis given by H1∩H2=∑imin{H1(i),H2(i)}∑imax{H1(i),H2(i)}. Large values correspond to high similarity.
    b) Chi-squared measure:χ2. Given two histograms H1 and H2 the χ2 measure of their similarity is given by χ2(H1,H2) =∑i:H1+H2>0(H1(i)−H2(i))2H1(i) +H2(i). Small values correspond to high similarity.
5. (10p) Using your histogram distance functions compare all image pairs. Create two images displaying your results. Use either colors or gray levels to represent quality of match.You should illustrate your results on 2 pairs of gray and color images. Show all steps. Makesure that your illustrations of edge orientation and magnitude are meaningful. Hint: you can use heat maps.
Extra credit opportunities:
1. (5p) Use quiver function from matplotlib to visualize gradients.
2. (5p) The slides illustrating how to compute color gradients using eigenvalues and eigenvectors are attached. Use the proposed method to obtain the edges.
3. (5p) If you compute eigenvalues and eigenvector using python loops your program will bequite slow. The slides show how it can be done much faster since most of the computation could be done faster using numpy. Speed up your code using the method illustrated in theslides.
Solution:

The following code reads and manipulates images in grayscale and color using gaussian blur, canny, and sobel techniqures to create histograms for comparisons by way of histogram intersection and chi-squared as outlined above. The results are histograms for all of the images in both grayscale and color, four heat maps showing the comparisons, and a quiver plot on the first image in the series.